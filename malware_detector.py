import tkinter as tk
from tkinter import filedialog, messagebox, ttk
import hashlib
import os
import shutil
import threading

# Basic malware signature database
MALWARE_SIGNATURES = {
    'md5': {
        'e99a18c428cb38d5f260853678922e03': 'Example-Virus-MD5'  # MD5 hash
    },
    # Add other hashes and types if needed
}

# Quarantine function
def quarantine_file(file_path, quarantine_dir="quarantine"):
    if not os.path.exists(quarantine_dir):
        os.makedirs(quarantine_dir)
    try:
        shutil.move(file_path, os.path.join(quarantine_dir, os.path.basename(file_path)))
        return True
    except IOError as e:
        print(f"Error quarantining file {file_path}: {e}")
        return False

# Calculate file hash
def calculate_hash(file_path, algorithm='md5'):
    hasher = hashlib.new(algorithm)
    try:
        with open(file_path, 'rb') as file:
            buf = file.read()
            hasher.update(buf)
        return hasher.hexdigest()
    except IOError:
        return None

# Scan a file and check against malware signatures
def scan_file(file_path, algorithm='md5'):
    file_hash = calculate_hash(file_path, algorithm)
    return MALWARE_SIGNATURES[algorithm].get(file_hash)

# Scan directory in a separate thread
def scan_directory(directory, quarantine=False):
    if not directory:
        messagebox.showerror("Error", "Please select a directory.")
        return

    def scan():
        infected_files = []
        for root, dirs, files in os.walk(directory):
            for file in files:
                file_path = os.path.join(root, file)
                result = scan_file(file_path)
                if result:
                    action = "Detected"
                    if quarantine:
                        if quarantine_file(file_path):
                            action = "Quarantined"
                        else:
                            action = "Failed to Quarantine"
                    infected_files.append((file, result, action))

        if infected_files:
            message = "Malware Detected:\n" + "\n".join(f"{file} - {malware} - {action}" for file, malware, action in infected_files)
        else:
            message = "No malware detected."

        text_results.delete('1.0', tk.END)
        text_results.insert('1.0', message)

        # Hide progress bar
        progress_bar.grid_remove()

    # Show progress bar
    progress_bar.grid()
    threading.Thread(target=scan).start()

# GUI Setup
root = tk.Tk()
root.title("Malware Detection and Quarantine Tool")
root.geometry("800x600")

# Directory selection
label_directory = tk.Label(root, text="Directory:")
label_directory.grid(row=0, column=0, sticky=tk.W)

entry_directory = tk.Entry(root, width=50)
entry_directory.grid(row=0, column=1, sticky=tk.E)

button_select_directory = tk.Button(root, text="Select Directory", command=lambda: select_directory())
button_select_directory.grid(row=0, column=2, sticky=tk.W)

# Progress bar
progress_bar = ttk.Progressbar(root, orient='horizontal', mode='indeterminate', length=280)
progress_bar.grid(row=1, column=0, columnspan=3)
progress_bar.grid_remove()  # Hide initially

# Text area for results
text_results = tk.Text(root, height=25)
text_results.grid(row=2, column=0, columnspan=3, sticky=tk.NSEW)

# Quarantine checkbox
quarantine_var = tk.BooleanVar()
checkbox_quarantine = tk.Checkbutton(root, text="Quarantine Detected Malware", variable=quarantine_var)
checkbox_quarantine.grid(row=3, column=0, columnspan=3)

def select_directory():
    directory = filedialog.askdirectory(title="Select Directory")
    if directory:
        entry_directory.delete(0, tk.END)
        entry_directory.insert(0, directory)
        scan_directory(directory, quarantine=quarantine_var.get())

root.mainloop()
